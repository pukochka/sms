declare global {
  interface Window {
    Telegram: {
      WebApp: WebAppInstance;
    };
  }
}

interface WebAppInstance {
  /* Текущий цвет заголовка в #RRGGBB формате. */
  headerColor: string;
  /**
  Текущий цвет фона в #RRGGBB формате.
  */
  backgroundColor: string;
  /** Высота видимой области веб-приложения в его последнем стабильном состоянии. Также доступен в CSS как переменная var(--tg-viewport-stable-height). Приложение может отображать только верхнюю часть веб-приложения, а его нижняя часть остается за пределами области экрана. Из этого положения пользователь может «вытянуть» веб-приложение на максимальную высоту, в то время как бот может сделать то же самое, вызвав метод expand() . В отличие от значения viewportHeight, значение viewportStableHeight не меняется при изменении положения веб-приложения с помощью жестов пользователя или во время анимации. Значение viewportStableHeight будет обновлено после того, как все жесты и анимация будут завершены и веб-приложение достигнет своего окончательного размера. Обратите внимание на событие viewportChanged с переданным параметромisStateStable=true, что позволит отслеживать при изменении стабильного состояния высоты видимой области. */
  viewportStableHeight: number;
  /** Текущая высота видимой области веб-приложения. Также доступно в CSS как переменная var(--tg-viewport-height). Приложение может отображать только верхнюю часть веб-приложения, а его нижняя часть остается за пределами области экрана. Из этого положения пользователь может «вытянуть» веб-приложение на максимальную высоту, в то время как бот может сделать то же самое, вызвав метод expand() . По мере изменения положения веб-приложения текущее значение высоты видимой области будет обновляться в режиме реального времени. Обратите внимание, что частота обновления этого значения недостаточна для плавного прохождения нижней границы окна. Его не следует использовать для закрепления элементов интерфейса в нижней части видимой области. viewportStableHeightДля этой цели лучше использовать значение поля.*/
  viewportHeight: number;
  /** True , если веб-приложение развернуто до максимально доступной высоты. False, если веб-приложение занимает часть экрана и может быть развернуто на всю высоту с помощью метода expand() . */
  isExpanded: boolean;
  /** Объект, содержащий текущие настройки темы, используемые в приложении Telegram. */
  themeParams: number;
  /** Цветовая схема, используемая в настоящее время в приложении Telegram. Либо «светлый», либо «темный». Также доступен как переменная CSS var(--tg-color-scheme).*/
  colorScheme: 'light' | 'dark';
  /** Название платформы приложения Telegram пользователя. */
  platform: string;
  /** Версия Bot API, доступная в приложении Telegram пользователя. */
  version: string;
  /** True , если диалоговое окно подтверждения включено, когда пользователь пытается закрыть веб-приложение. False , если диалоговое окно подтверждения отключено. */
  isClosingConfirmationEnabled: boolean;
  /** API бота 6.2+
      Метод, который включает диалоговое окно подтверждения, когда пользователь пытается закрыть веб-приложение.
  */
  enableClosingConfirmation(): void;
  /** Метод, который информирует приложение Telegram о том, что веб-приложение готово к отображению. Рекомендуется вызывать этот метод как можно раньше, как только будут загружены все необходимые элементы интерфейса. После вызова этого метода заполнитель загрузки скрывается и отображается веб-приложение. Если метод не вызывается, заполнитель будет скрыт только при полной загрузке страницы. */
  ready(): void;
  /** Метод, который расширяет веб-приложение до максимально доступной высоты. Чтобы узнать, развернуто ли веб-приложение на максимальную высоту, обратитесь к значению параметра Telegram.WebApp.isExpanded . */
  expand(): void;
  /** Метод, который закрывает веб-приложение. */
  close(): void;
  /** Объект для управления тактильной обратной связью. */
  HapticFeedback: {
    /**
      API бота 6.1+
      Метод сообщает, что произошло воздействие. Приложение Telegram может воспроизводить соответствующие тактильные ощущения в зависимости от переданного значения стиля.
      Style может быть одним из следующих значений:
      - light указывает на столкновение между небольшими или легкими объектами пользовательского интерфейса,
      - medium указывает на столкновение между средними или средними объектами пользовательского интерфейса,
      - heavy указывает на столкновение между большими или тяжелыми объектами пользовательского интерфейса ,
      - rigid указывает на коллизию между жесткими или негибкими объектами пользовательского интерфейса,
      - soft указывает на коллизию между мягкими или гибкими объектами пользовательского интерфейса .
     */
    impactOccurred(style: HapticFeedbackStyle): void;
    /**
    * API бота 6.1+Метод сообщает, что задача или действие завершилось успешно, не удалось или выдало предупреждение.
    * Приложение Telegram может воспроизводить соответствующие тактильные ощущения в зависимости от переданного значения типа.
    * Type может быть одним из следующих значений:
-     - notify указывает на сбой задачи или действия,
-     - success указывает на успешное завершение задачи или действия,
-     - warning указывает на то, что задача или действие создали предупреждение.
    * */
    notificationOccurred(type: HapticFeedbackType): void;
    /**
     * API бота 6.1+Метод сообщает, что пользователь изменил выбор.
     * Приложение Telegram может воспроизводить соответствующие тактильные сигналы.
     * Не используйте эту обратную связь, когда пользователь делает или подтверждает выбор;
     * используйте его только при изменении выбора.
     * */
    selectionChanged(): void;
  };
  /** Объект для управления главной кнопкой, которая отображается внизу веб-приложения в интерфейсе Telegram. */
  MainButton: {
    /** Текущий текст кнопки. Установите ПРОДОЛЖИТЬ по умолчанию. */
    text: string;
    /** Текущий цвет кнопки. По умолчанию установлено значение themeParams.button_color . */
    color: string;
    /** Текущий цвет текста кнопки. По умолчанию установлено значение themeParams.button_text_color . */
    textColor: string;
    /** Показывает, видна ли кнопка. По умолчанию установлено значение false  */
    isVisible: boolean;
    /** Показывает, активна ли кнопка. По умолчанию установлено значение true */
    isActive: boolean;
    /** Только для чтения. Показывает, отображается ли на кнопке индикатор загрузки. */
    isProgressVisible: boolean;
    /** Метод для установки текста кнопки. */
    setText(): void;
    /** Метод, который устанавливает обработчик события нажатия кнопки. Псевдоним дляTelegram.WebApp.onEvent('mainButtonClicked', callback) */
    onEvent(): void;
    /** Метод, удаляющий обработчик события нажатия кнопки. Псевдоним для Telegram.WebApp.offEvent('mainButtonClicked', callback) */
    offEvent(): void;
    /** Способ сделать кнопку видимой. Обратите внимание, что открытие веб-приложения из меню вложений скрывает главную кнопку до тех пор, пока пользователь не взаимодействует с интерфейсом веб-приложения. */
    show(): void;
    /** 	Способ скрыть кнопку. */
    hide(): void;
    /** Способ включения кнопки. */
    enable(): void;
    /** Способ отключения кнопки. */
    disable(): void;
    /** Метод отображения индикатора загрузки на кнопке. Рекомендуется отображать ход загрузки, если действие, привязанное к кнопке, может занять много времени. По умолчанию кнопка отключена во время выполнения действия. Если параметр leaveActive=trueпередан, кнопка остается активной. */
    showProgress(): void;
    /** Способ скрыть индикатор загрузки. */
    hideProgress(): void;
    /** Способ установки параметров кнопки. Параметр params — это объект, содержащий одно или несколько полей, которые необходимо изменить:
      text — текст кнопки;
      цвет - цвет кнопки;
      text_color - цвет текста кнопки;
      is_active — включить кнопку;
      is_visible - показать кнопку.
      */
    setParams(): void;
  };
  /** Объект для управления кнопкой «Назад», которая может отображаться в шапке веб-приложения в интерфейсе Telegram. */
  BackButton: string;
  /** Строка с необработанными данными, переданными в веб-приложение, удобная для проверки данных.*/
  initData: string;
}

declare type HapticFeedbackStyle =
  | 'light'
  | 'medium'
  | 'heavy'
  | 'rigid'
  | 'soft';
declare type HapticFeedbackType = 'error' | 'success' | 'warning';

export {};
